1 Inicio
2 funcion principal()	
3   k, i[0-n] 
4   k1, i[0-n]
5   residuo, i[0-n]
6   acumulador, x(150)[{a-z}, {A-Z}, {BS}, {0-9}]
7   j, i[0-n] <-- 0
8   << "Ingrese un nÃºmero:"
9   >> k  									//1920
10   k1 = k									//k1=1920
11   Mientras(k1>0)Haga								//1920>0 v 
										//192 >0 v
										//19 > 0 v
										// 1 > 0 v
										// 0 > 0 f				
13   	acumuladorString = obtenerResultado(k1; j)		// 0 * 10 elevado a la potencia 0
								// 2 * 10 elevado a la potencia 1
								// 9 * 10 elevado a la potencia 2
								// 1 * 10 elevado a la potencia 3
									//Pantalla:
14	<< acumuladorString						// 0 * 10 elevado a la potencia 0
									// 2 * 10 elevado a la potencia 1
									// 9 * 10 elevado a la potencia 2
									// 1 * 10 elevado a la potencia 3
15	j = j + 1						// 1
16	k1 = k1/10						// 192
17    Fin_Mientras
18 fin funcion principal

19 funcion obtenerResultado(k1, i; j, i) : x 	//1920, 0 
						//192, 1
						//19 , 2
						//1 , 3
20 	residuo, i[0-n]
21 	mensajePreeliminar, x(150)[{a-z}, {A-Z}, {BS}, {0-9}] 
22 	residuo <-- obtenerResiduo(k1) 							// 0
											// 2
											// 9
											// 1
23 	mensajePreeliminar <-- residuo + "* 10 elevado a la pontencia " + j	// 0 * 10 elevado a la potencia 0
										// 2 * 10 elevado a la potencia 1
										// 9 * 10 elevado a la potencia 2
										// 1 * 10 elevado a la potencia 3								
24 	retornar mensajePreeliminar	
25 fin funcion obtenerResultado

26 funcion obtenerResiduo(k1, i) : i	//k1 = 1920
					//k1 = 192 
					//k1 = 19 
					//k1 = 1 
27 	residuo, i[0-n]	
28 	residuo <-- k1 MOD 10		//1920 MOD 10 = 0
					//192 MOD 10 = 2
					//19 MOD 10 = 9
					//1 MOD 10 = 1 		 
29 	return residuo			//0
					//2
					//9
					//1
30 fin funcion obtenerResiduo
31 Fin